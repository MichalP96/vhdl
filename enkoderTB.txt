
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY enkoder_tb IS
END enkoder_tb;
 
ARCHITECTURE behavior OF enkoder_tb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT enkoder
    PORT(
         A : IN  std_logic;
         B : IN  std_logic;
         u_d_out : OUT  std_logic;
         res : IN  std_logic;
			diody : out STD_LOGIC_VECTOR(3 downto 0);
         clk_out : OUT  std_logic;
         clk : IN  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal A : std_logic := '0';
   signal B : std_logic := '0';
   signal res : std_logic := '0';
   signal clk : std_logic := '0';

 	--Outputs
   signal u_d_out : std_logic;
   signal clk_out : std_logic;
	signal diody :  STD_LOGIC_VECTOR(3 downto 0);

   -- Clock period definitions
  
   constant clk_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: enkoder PORT MAP (
          A => A,
          B => B,
          u_d_out => u_d_out,
          res => res,
          clk_out => clk_out,
			 diody => diody,
          clk => clk
        );


 
   clk_process :process
   begin
		clk <= '0';
		wait for clk_period/2;
		clk <= '1';
		wait for clk_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
	res <= '0';
	
	
	A <= '0';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '1';
	wait for 4*clk_period;
		A <= '0';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '1';
	wait for 4*clk_period;
		A <= '0';
	B <= '0';
	wait for 4*clk_period;
	-----
	
	A <= '1';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '1';
	wait for 4*clk_period;
		A <= '0';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '1';
	wait for 4*clk_period;
		A <= '0';
	B <= '0';
	wait for 4*clk_period;
	
	A <= '1';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '1';
	wait for 4*clk_period;
		A <= '0';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '0';
	wait for 4*clk_period;
	A <= '1';
	B <= '1';
	wait for 4*clk_period;
	A <= '0';
	B <= '1';
	wait for 4*clk_period;
		A <= '0';
	B <= '0';
	wait for 4*clk_period;
		wait for 4*clk_period;
		A <= '0';
	B <= '1';
	wait for 4*clk_period;
	
		wait for 4*clk_period;
		A <= '1';
	B <= '1';
	wait for 4*clk_period;
	
		wait for 4*clk_period;
		A <= '1';
	B <= '0';
	wait for 4*clk_period;
		
		A <= '0';
	B <= '0';
	wait for 4*clk_period;
		
		
			wait for 4*clk_period;
		A <= '0';
	B <= '1';
	wait for 4*clk_period;
	
		wait for 4*clk_period;
		A <= '1';
	B <= '1';
	wait for 4*clk_period;
	
		wait for 4*clk_period;
		A <= '1';
	B <= '0';
	wait for 4*clk_period;
		
		A <= '0';
	B <= '0';
	wait for 4*clk_period;
		
	
	


		

	
	-----

	
	
	
	--assert false severity failure;

     
	  
   end process;

END;
